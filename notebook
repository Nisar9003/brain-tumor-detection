from google.colab import drive
drive.mount('/content/drive')
!pip install matplotlib
!pip install seaborn
!pip install numpy
!pip install pandas
!pip install tensorflow
!pip install tqdm
!pip install scikit-learn
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import cv2
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tqdm import tqdm
import os
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint
from sklearn.metrics import classification_report,confusion_matrix
import ipywidgets as widgets
import io
from PIL import Image
from IPython.display import display,clear_output
from warnings import filterwarnings
for dirname, _, filenames in os.walk('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

colors_dark = ["#1F1F1F", "#313131", '#636363', '#AEAEAE', '#DADADA']
colors_red = ["#331313", "#582626", '#9E1717', '#D35151', '#E9B4B4']
colors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']

sns.palplot(colors_dark)
sns.palplot(colors_green)
sns.palplot(colors_red)
labels = ['glioma_tumor','no_tumor','meningioma_tumor','pituitary_tumor']
X_train = []
y_train = []
image_size = 150
for i in labels:
    folderPath = os.path.join('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training',i)
    for j in tqdm(os.listdir(folderPath)):
        img = cv2.imread(os.path.join(folderPath,j))
        img = cv2.resize(img,(image_size, image_size))
        X_train.append(img)
        y_train.append(i)

for i in labels:
    folderPath = os.path.join('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Testing',i)
    for j in tqdm(os.listdir(folderPath)):
        img = cv2.imread(os.path.join(folderPath,j))
        img = cv2.resize(img,(image_size,image_size))
        X_train.append(img)
        y_train.append(i)

X_train = np.array(X_train)
y_train = np.array(y_train)
X_train, y_train = shuffle(X_train,y_train, random_state=101)
X_train.shape
X_train,X_test,y_train,y_test = train_test_split(X_train,y_train, test_size=0.1,random_state=101)

y_train_new = []
for i in y_train:
    y_train_new.append(labels.index(i))
y_train = y_train_new
y_train = tf.keras.utils.to_categorical(y_train)


y_test_new = []
for i in y_test:
    y_test_new.append(labels.index(i))
y_test = y_test_new
y_test = tf.keras.utils.to_categorical(y_test)
effnet = EfficientNetB0(weights='imagenet',include_top=False,input_shape=(image_size,image_size,3))
model = effnet.output
model = tf.keras.layers.GlobalAveragePooling2D()(model)
model = tf.keras.layers.Dropout(rate=0.5)(model)
model = tf.keras.layers.Dense(4,activation='softmax')(model)
model = tf.keras.models.Model(inputs=effnet.input, outputs = model)
model.summary()

model.compile(loss='categorical_crossentropy',optimizer = 'Adam', metrics= ['accuracy'])
tensorboard = TensorBoard(log_dir = 'logs')
checkpoint = ModelCheckpoint("effnet.keras", monitor="val_accuracy", save_best_only=True, mode="auto", verbose=1)
reduce_lr = ReduceLROnPlateau(monitor = 'val_accuracy', factor = 0.3, patience = 2, min_delta = 0.001, mode='auto',verbose=1)
model.save("effnet.h5", save_format="h5")

history = model.fit(X_train,y_train,validation_split=0.1, epochs =12, verbose=1, batch_size=32, callbacks=[tensorboard,checkpoint,reduce_lr])
pred = model.predict(X_test)
pred = np.argmax(pred,axis=1)
y_test_new = np.argmax(y_test,axis=1)
print(classification_report(y_test_new,pred))
def img_pred(upload):
    for name, file_info in uploader.value.items():
        img = Image.open(io.BytesIO(file_info['content']))
    opencvImage = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
    img = cv2.resize(opencvImage,(150,150))
    img = img.reshape(1,150,150,3)
    p = model.predict(img)
    p = np.argmax(p,axis=1)[0]

    if p==0:
        p='Glioma Tumor'
    elif p==1:
        print('The model predicts that there is no tumor')
    elif p==2:
        p='Meningioma Tumor'
    else:
        p='Pituitary Tumor'

    if p!=1:
        print(f'The Model predicts that it is a {p}')
uploader = widgets.FileUpload()
display(uploader)
button = widgets.Button(description='Predict')
out = widgets.Output()
def on_button_clicked(_):
    with out:
        clear_output()
        try:
            img_pred(uploader)

        except:
            print('No Image Uploaded/Invalid Image File')
button.on_click(on_button_clicked)
widgets.VBox([button,out])
!pip install gradio
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
import cv2
from tqdm import tqdm
import pickle
import gradio as gr

# Define labels and dataset paths
labels = ['glioma_tumor', 'no_tumor', 'meningioma_tumor', 'pituitary_tumor']
data_path = '/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master'

# Prepare the data
X_train, y_train = [], []
image_size = 150

for label in labels:
    folder_path = os.path.join(data_path, 'Training', label)
    for image_file in tqdm(os.listdir(folder_path)):
        img = cv2.imread(os.path.join(folder_path, image_file))
        img = cv2.resize(img, (image_size, image_size))
        X_train.append(img)
        y_train.append(label)

for label in labels:
    folder_path = os.path.join(data_path, 'Testing', label)
    for image_file in tqdm(os.listdir(folder_path)):
        img = cv2.imread(os.path.join(folder_path, image_file))
        img = cv2.resize(img, (image_size, image_size))
        X_train.append(img)
        y_train.append(label)

X_train = np.array(X_train)
y_train = np.array(y_train)

# Shuffle and split the data
X_train, y_train = shuffle(X_train, y_train, random_state=101)
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.1, random_state=101)

# Encode labels
y_train = tf.keras.utils.to_categorical([labels.index(label) for label in y_train])
y_test = tf.keras.utils.to_categorical([labels.index(label) for label in y_test])

# Build the model
effnet = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(image_size, image_size, 3))
model = tf.keras.Sequential([
    effnet,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(len(labels), activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Define callbacks
checkpoint = ModelCheckpoint('effnet_model.keras', save_best_only=True, monitor='val_accuracy', verbose=1)
reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.3, patience=2, min_delta=0.001, verbose=1)

# Train the model
history = model.fit(
    X_train, y_train,
    validation_split=0.1,
    epochs=12,
    batch_size=32,
    callbacks=[checkpoint, reduce_lr],
    verbose=1
)

# Save the model as a Pickle file
model_structure = model.to_json()
model_weights = model.get_weights()
with open("effnet_model.pkl", "wb") as f:
    pickle.dump({"structure": model_structure, "weights": model_weights}, f)

# Define prediction function
def predict_image(img):
    img = cv2.resize(img, (image_size, image_size))
    img = img.reshape(1, image_size, image_size, 3)
    pred = model.predict(img)
    pred_class = np.argmax(pred, axis=1)[0]
    return labels[pred_class]

# Gradio interface
def gradio_predict(image):
    img_array = np.array(image)
    prediction = predict_image(img_array)
    return f"Prediction: {prediction}"

interface = gr.Interface(
    fn=gradio_predict,
    inputs=gr.Image(type="numpy", label="Upload MRI Image"),
    outputs="text",
    title="Brain Tumor Classification",
    description="Upload an MRI image to classify the type of tumor (Glioma, No Tumor, Meningioma, or Pituitary)."
)

# Launch Gradio interface
interface.launch()

!pip install gradio huggingface_hub

import os
from tqdm import tqdm

folder_path = '/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training/meningioma_tumor'

# Check if the directory exists
if not os.path.exists(folder_path):
    raise FileNotFoundError(f"Directory not found: {folder_path}")

# Process images (simulate actual work)
for image_file in tqdm(os.listdir(folder_path), desc="Processing images"):
    file_path = os.path.join(folder_path, image_file)
    # Simulate reading file (e.g., for image processing)
    with open(file_path, 'rb') as f:
        data = f.read()  # Simulate file read

import os

folder_path = '/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training/meningioma_tumor'

if os.path.exists(folder_path):
    print(f"Directory exists: {folder_path}")
    print("Contents:", os.listdir(folder_path))
else:
    print(f"Directory not found: {folder_path}")

import pickle

# Serialize model to Pickle
model_structure = model.to_json()
model_weights = model.get_weights()

with open("effnet_model.pkl", "wb") as f:
    pickle.dump({"structure": model_structure, "weights": model_weights}, f)

with open("effnet_model.pkl", "rb") as f:
    data = pickle.load(f)

# Rebuild the model
from tensorflow.keras.models import model_from_json

model = model_from_json(data["structure"])
model.set_weights(data["weights"])

import os
print(os.path.exists('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training/meningioma_tumor'))

print(os.path.exists('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master'))
print(os.path.exists('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training'))
print(os.path.exists('/content/drive/MyDrive/Brain-Tumor-Classification-DataSet-master/Training/glioma_tumor'))

# After training and evaluation

# Save model
model.save("brain_tumor_model.h5")

# Download it to your PC
from google.colab import files
files.download("brain_tumor_model.h5")
